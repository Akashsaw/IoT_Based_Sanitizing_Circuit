//Codes by Buffer Circuitz////define//int sensorState = 0;int inches = 0;int cm = 0;int lightState=0;// wifi module//String ssid     = "Simulator Wifi";  // SSID to connect toString password = ""; // Our virtual wifi has no password (so dont do your banking stuff on this network)String host     = "api.thingspeak.com"; // Open Weather Map APIconst int httpPort   = 80;String uripir     = "/update?api_key=6MMG3QPTAA7VUQNH&field=1";String uritemp     = "/update?api_key=6MMG3QPTAA7VUQNH&field2=";String uriun     = "/update?api_key=6MMG3QPTAA7VUQNH&field3=";String urilight     = "/update?api_key=6MMG3QPTAA7VUQNH&field4=";int setupESP8266(void) {  // Start our ESP8266 Serial Communication  Serial.begin(115200);   // Serial connection over USB to computer  Serial.println("AT");   // Serial connection on Tx / Rx port to ESP8266  delay(10);        // Wait a little for the ESP to respond  if (!Serial.find("OK")) return 1;      // Connect to 123D Circuits Simulator Wifi  Serial.println("AT+CWJAP=\"" + ssid + "\",\"" + password + "\"");  delay(10);        // Wait a little for the ESP to respond  if (!Serial.find("OK")) return 2;    // Open TCP connection to the host:  Serial.println("AT+CIPSTART=\"TCP\",\"" + host + "\"," + httpPort);  delay(50);        // Wait a little for the ESP to respond  if (!Serial.find("OK")) return 3;    return 0;}void anydata(void) {    int temp1 = map(analogRead(A0),20,358,-40,125);     // Construct our HTTP call  String httpPacket = "GET " + uritemp + String(temp1) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n";  int length = httpPacket.length();    // Send our message length  Serial.print("AT+CIPSEND=");  Serial.println(length);  delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1;  // Send our http request  Serial.print(httpPacket);  delay(10); // Wait a little for the ESP to respond  if (!Serial.find("SEND OK\r\n")) return;    }void lightData(void) {    int light = analogRead(A3);     // Construct our HTTP call  String httpPacket = "GET " + urilight + String(light) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n";  int length = httpPacket.length();    // Send our message length  Serial.print("AT+CIPSEND=");  Serial.println(length);  delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1;  // Send our http request  Serial.print(httpPacket);  delay(10); // Wait a little for the ESP to respond  if (!Serial.find("SEND OK\r\n")) return;    }void pirdata(void){  int Sensordata= digitalRead(2);  String httpPacket = "GET " + uripir + Sensordata + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n";  int length = httpPacket.length();    // Send our message length  Serial.print("AT+CIPSEND=");  Serial.println(length);  delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1;  // Send our http request  Serial.print(httpPacket);  delay(10); // Wait a little for the ESP to respond  if (!Serial.find("SEND OK\r\n")) return;}void usdata(void){    String httpPacket = "GET " + uriun + String(cm) + " HTTP/1.1\r\nHost: " + host + "\r\n\r\n";  int length = httpPacket.length();    // Send our message length  Serial.print("AT+CIPSEND=");  Serial.println(length);  delay(10); // Wait a little for the ESP to respond if (!Serial.find(">")) return -1;  // Send our http request  Serial.print(httpPacket);  delay(10); // Wait a little for the ESP to respond  if (!Serial.find("SEND OK\r\n")) return;  }long readUltrasonicDistance(int triggerPin, int echoPin){  pinMode(triggerPin, OUTPUT);  // Clear the trigger  digitalWrite(triggerPin, LOW);  delayMicroseconds(2);  // Sets the trigger pin to HIGH state for 10 microseconds  digitalWrite(triggerPin, HIGH);  delayMicroseconds(10);  digitalWrite(triggerPin, LOW);  pinMode(echoPin, INPUT);  // Reads the echo pin, and returns the sound wave travel time in microseconds  return pulseIn(echoPin, HIGH);}void setup(){      pinMode(3, OUTPUT);    pinMode(13, OUTPUT);    setupESP8266();}void loop()  {  anydata();  pirdata();  usdata();  lightData(); int sensorState=digitalRead(2); const int temp= analogRead(A0); if (sensorState==HIGH & cm<=100 & temp>=32) {    digitalWrite(3, HIGH);    digitalWrite(13, HIGH);    }   else  {    digitalWrite(3, LOW);    digitalWrite(13, LOW);     }delay(10);     // measure the ping time in cm  cm = 0.01723 * readUltrasonicDistance(7, 7);  // convert to inches by dividing by 2.54  inches = (cm / 2.54);  Serial.print(inches);  Serial.print("in, ");  Serial.print(cm);  Serial.println("cm");  delay(100); // Wait for 100 millisecond(s)  delay(1000);  }